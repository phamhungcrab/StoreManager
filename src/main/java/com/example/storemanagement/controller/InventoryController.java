package com.example.storemanagement.controller;

/*
 * InventoryController ‚Äì Controller g·∫Øn v·ªõi inventory.fxml
 * üéØ Nhi·ªám v·ª•:
 *   - Hi·ªÉn th·ªã t·ªïng quan h√†ng t·ªìn kho (t·ª´ view v_inventory_overview trong DB).
 *   - Cho ph√©p t√¨m ki·∫øm, l·ªçc theo c·ª≠a h√†ng, ph√¢n trang, CRUD s·∫£n ph·∫©m.
 *   - Th·ª±c hi·ªán nh·∫≠p kho / xu·∫•t kho (Import / Export stock).
 * üí° Ghi ch√∫:
 *   - T·∫°m th·ªùi truy v·∫•n danh s√°ch Store v√† Supplier tr·ª±c ti·∫øp t·ª´ DB (ch∆∞a t·∫°o DAO ri√™ng).
 *   - Sau n√†y c√≥ th·ªÉ t√°ch th√†nh StoreDAO, SupplierDAO ƒë·ªÉ ƒë√∫ng m√¥ h√¨nh MVC.
 */

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import com.example.storemanagement.dao.DBConnection;
import com.example.storemanagement.dao.ProductDAO;
import com.example.storemanagement.model.Product;
import com.example.storemanagement.service.InventoryService;
import com.example.storemanagement.util.AlertUtils;
import com.example.storemanagement.util.DateUtils;

import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.beans.property.ReadOnlyStringWrapper;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Dialog;
import javafx.scene.control.Label;
import javafx.scene.control.Pagination;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.TextInputDialog;
import javafx.scene.layout.GridPane;

public class InventoryController {

    // ====== Tham chi·∫øu c√°c ph·∫ßn t·ª≠ FXML theo fx:id trong inventory.fxml ======
    @FXML private ComboBox<IdName> storeFilter;        // L·ªçc theo c·ª≠a h√†ng
    @FXML private ComboBox<IdName> supplierFilter;     // L·ªçc theo nh√† cung c·∫•p
    @FXML private TextField productSearchField;        // √î t√¨m ki·∫øm s·∫£n ph·∫©m
    @FXML private Button searchProductBtn;             // N√∫t t√¨m ki·∫øm
    @FXML private Button addProductBtn;                // N√∫t th√™m s·∫£n ph·∫©m
    @FXML private Button editProductBtn;               // N√∫t s·ª≠a s·∫£n ph·∫©m
    @FXML private Button deleteProductBtn;             // N√∫t x√≥a s·∫£n ph·∫©m
    @FXML private Button importStockBtn;               // N√∫t nh·∫≠p kho
    @FXML private Button exportStockBtn;               // N√∫t xu·∫•t kho
    @FXML private Button refreshInventoryBtn;          // N√∫t l√†m m·ªõi danh s√°ch

    @FXML private TableView<ProductDAO.InventoryOverview> inventoryTable; // B·∫£ng d·ªØ li·ªáu kho
    @FXML private TableColumn<ProductDAO.InventoryOverview, Long> colId;  // C·ªôt ID s·∫£n ph·∫©m
    @FXML private TableColumn<ProductDAO.InventoryOverview, String> colName; // C·ªôt t√™n
    @FXML private TableColumn<ProductDAO.InventoryOverview, String> colSku;  // C·ªôt m√£ SKU
    @FXML private TableColumn<ProductDAO.InventoryOverview, String> colStore; // C·ªôt c·ª≠a h√†ng
    @FXML private TableColumn<ProductDAO.InventoryOverview, String> colSupplier; // C·ªôt nh√† cung c·∫•p
    @FXML private TableColumn<ProductDAO.InventoryOverview, Integer> colStock;   // C·ªôt s·ªë l∆∞·ª£ng t·ªìn
    @FXML private TableColumn<ProductDAO.InventoryOverview, BigDecimal> colUnitPrice; // ƒê∆°n gi√°
    @FXML private TableColumn<ProductDAO.InventoryOverview, String> colUpdatedAt;     // Ng√†y c·∫≠p nh·∫≠t

    @FXML private Label inventoryStatusLabel;          // Nh√£n tr·∫°ng th√°i
    @FXML private Pagination inventoryPagination;      // Ph√¢n trang

    // ====== Bi·∫øn x·ª≠ l√Ω logic nghi·ªáp v·ª• ======
    private final InventoryService inventoryService = new InventoryService(); // G·ªçi xu·ªëng t·∫ßng Service
    private final int pageSize = 20;      // S·ªë d√≤ng hi·ªÉn th·ªã m·ªói trang
    private int currentPage = 1;          // Trang hi·ªán t·∫°i
    private String currentKeyword = "";   // T·ª´ kh√≥a t√¨m ki·∫øm hi·ªán t·∫°i
    private Long currentStoreId = null;   // ID c·ª≠a h√†ng ƒë∆∞·ª£c ch·ªçn (l·ªçc)

    // ====== Kh·ªüi t·∫°o giao di·ªán sau khi FXML load xong ======
    @FXML
    public void initialize() {
        // N·∫°p danh s√°ch c·ª≠a h√†ng v√† nh√† cung c·∫•p v√†o combobox
        storeFilter.setItems(FXCollections.observableArrayList(loadStores()));
        supplierFilter.setItems(FXCollections.observableArrayList(loadSuppliers()));

        // C·∫•u h√¨nh hi·ªÉn th·ªã t·ª´ng c·ªôt trong TableView
        colId.setCellValueFactory(cd -> new ReadOnlyObjectWrapper<>(cd.getValue().productId));
        colName.setCellValueFactory(cd -> new ReadOnlyStringWrapper(cd.getValue().productName));
        colSku.setCellValueFactory(cd -> new ReadOnlyStringWrapper(cd.getValue().sku));
        colStore.setCellValueFactory(cd -> new ReadOnlyStringWrapper(cd.getValue().storeName));
        colSupplier.setCellValueFactory(cd -> new ReadOnlyStringWrapper("")); // ch∆∞a join supplier
        colStock.setCellValueFactory(cd -> new ReadOnlyObjectWrapper<>(cd.getValue().quantity));
        colUnitPrice.setCellValueFactory(cell -> new ReadOnlyObjectWrapper<>(null)); // ch∆∞a hi·ªÉn th·ªã gi√°
        colUpdatedAt.setCellValueFactory(cd -> new ReadOnlyStringWrapper(DateUtils.format(cd.getValue().updatedAt)));

        // ====== G√°n s·ª± ki·ªán c√°c n√∫t ======
        searchProductBtn.setOnAction(e -> doSearch(1));            // t√¨m ki·∫øm
        refreshInventoryBtn.setOnAction(e -> doSearch(currentPage)); // l√†m m·ªõi
        storeFilter.valueProperty().addListener((obs, o, n) -> {    // l·ªçc theo c·ª≠a h√†ng
            currentStoreId = (n == null ? null : n.id);
            doSearch(1);
        });

        addProductBtn.setOnAction(e -> onAddProduct());             // th√™m s·∫£n ph·∫©m
        editProductBtn.setOnAction(e -> onEditProduct());           // s·ª≠a s·∫£n ph·∫©m
        deleteProductBtn.setOnAction(e -> onDeleteProduct());       // x√≥a s·∫£n ph·∫©m

        importStockBtn.setOnAction(e -> onMoveStock(true));         // nh·∫≠p kho
        exportStockBtn.setOnAction(e -> onMoveStock(false));        // xu·∫•t kho

        // Khi ƒë·ªïi trang ‚Üí n·∫°p d·ªØ li·ªáu m·ªõi
        inventoryPagination.currentPageIndexProperty().addListener((obs, ov, nv) -> {
            currentPage = nv.intValue() + 1;
            doSearch(currentPage);
        });

        // L·∫ßn ƒë·∫ßu load
        doSearch(1);
    }

    // ====== H√†m t√¨m ki·∫øm v√† hi·ªÉn th·ªã danh s√°ch t·ªìn kho ======
    private void doSearch(int page) {
        try {
            currentKeyword = productSearchField.getText() == null ? "" : productSearchField.getText().trim();
            List<ProductDAO.InventoryOverview> list =
                    inventoryService.getInventoryOverview(currentStoreId, currentKeyword, page, pageSize);

            // ∆Ø·ªõc l∆∞·ª£ng s·ªë trang: n·∫øu √≠t h∆°n pageSize v√† l√† trang ƒë·∫ßu ti√™n ‚Üí ch·ªâ 1 trang
            int pageCount = list.size() < pageSize && page == 1 ? 1 : Math.max(1, page);
            inventoryPagination.setPageCount(pageCount);
            inventoryPagination.setCurrentPageIndex(page - 1);

            // C·∫≠p nh·∫≠t b·∫£ng
            inventoryTable.getItems().setAll(list);
            updateStatus();
        } catch (SQLException ex) {
            AlertUtils.error("Load inventory failed", ex.getMessage());
        }
    }

    // ====== Nh·∫≠p / Xu·∫•t kho ======
    private void onMoveStock(boolean isImport) {
        ProductDAO.InventoryOverview sel = inventoryTable.getSelectionModel().getSelectedItem();
        if (sel == null) { // ch∆∞a ch·ªçn d√≤ng n√†o
            AlertUtils.warn("No selection", "Ch·ªçn m·ªôt d√≤ng kho ƒë·ªÉ " + (isImport ? "nh·∫≠p" : "xu·∫•t"));
            return;
        }

        // H·ªôp tho·∫°i nh·∫≠p s·ªë l∆∞·ª£ng
        TextInputDialog d = new TextInputDialog("1");
        d.setTitle(isImport ? "Import Stock" : "Export Stock");
        d.setHeaderText("S·ªë l∆∞·ª£ng");
        d.setContentText("Quantity:");
        Optional<String> res = d.showAndWait();

        // N·∫øu ng∆∞·ªùi d√πng b·∫•m OK
        res.ifPresent(s -> {
            try {
                int qty = Integer.parseInt(s.trim());
                if (qty <= 0) throw new NumberFormatException(); // ki·ªÉm tra h·ª£p l·ªá
                if (isImport)
                    inventoryService.importStock(sel.storeId, sel.productId, qty, "Manual import");
                else
                    inventoryService.exportStock(sel.storeId, sel.productId, qty, "Manual export");
                doSearch(currentPage); // c·∫≠p nh·∫≠t l·∫°i b·∫£ng
            } catch (NumberFormatException ne) {
                AlertUtils.warn("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá", "Quantity ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng");
            } catch (SQLException ex) {
                AlertUtils.error("Stock move failed", ex.getMessage());
            }
        });
    }

    // ====== Th√™m s·∫£n ph·∫©m m·ªõi ======
    private void onAddProduct() {
        Dialog<Product> d = buildProductDialog(null); // m·ªü dialog r·ªóng
        d.showAndWait().ifPresent(p -> { // n·∫øu ng∆∞·ªùi d√πng b·∫•m OK
            try {
                long id = inventoryService.addProduct(p); // th√™m DB
                AlertUtils.info("Created", "ƒê√£ t·∫°o s·∫£n ph·∫©m #" + id);
                doSearch(1);
            } catch (SQLException ex) {
                AlertUtils.error("Create failed", ex.getMessage());
            }
        });
    }

    // ====== S·ª≠a s·∫£n ph·∫©m ======
    private void onEditProduct() {
        ProductDAO.InventoryOverview sel = inventoryTable.getSelectionModel().getSelectedItem();
        if (sel == null) { AlertUtils.warn("No selection", "Ch·ªçn m·ªôt d√≤ng ƒë·ªÉ s·ª≠a s·∫£n ph·∫©m"); return; }
        try {
            Product p = inventoryService.findProductById(sel.productId).orElse(null);
            if (p == null) { AlertUtils.warn("Not found", "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m"); return; }

            Dialog<Product> d = buildProductDialog(p);
            d.showAndWait().ifPresent(updated -> {
                try {
                    updated.setId(p.getId());
                    inventoryService.updateProduct(updated);
                    doSearch(currentPage);
                } catch (SQLException ex) { AlertUtils.error("Update failed", ex.getMessage()); }
            });
        } catch (SQLException ex) {
            AlertUtils.error("Load product failed", ex.getMessage());
        }
    }

    // ====== X√≥a s·∫£n ph·∫©m ======
    private void onDeleteProduct() {
        ProductDAO.InventoryOverview sel = inventoryTable.getSelectionModel().getSelectedItem();
        if (sel == null) { AlertUtils.warn("No selection", "Ch·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ xo√°"); return; }
        if (!AlertUtils.confirm("X√°c nh·∫≠n", "Xo√° s·∫£n ph·∫©m #" + sel.productId + "?")) return;
        try {
            inventoryService.deleteProduct(sel.productId);
            doSearch(currentPage);
        } catch (SQLException ex) {
            AlertUtils.error("Delete failed", ex.getMessage());
        }
    }

    // ====== H·ªôp tho·∫°i th√™m / s·ª≠a s·∫£n ph·∫©m ======
    private Dialog<Product> buildProductDialog(Product init) {
        Dialog<Product> d = new Dialog<>();
        d.setTitle(init == null ? "Th√™m s·∫£n ph·∫©m" : "S·ª≠a s·∫£n ph·∫©m");
        d.getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);

        // T·∫°o c√°c √¥ nh·∫≠p li·ªáu
        TextField tfSku = new TextField(init != null ? init.getSku() : "");
        TextField tfName = new TextField(init != null ? init.getName() : "");
        TextField tfUnit = new TextField(init != null ? init.getUnit() : "pcs");
        TextField tfPrice = new TextField(init != null && init.getUnitPrice()!=null? init.getUnitPrice().toPlainString() : "0");
        TextField tfCost  = new TextField(init != null && init.getUnitCost()!=null ? init.getUnitCost().toPlainString() : "0");
        CheckBox cbActive = new CheckBox("Active"); cbActive.setSelected(init == null || init.isActive());

        // D√†n layout theo d·∫°ng l∆∞·ªõi
        GridPane gp = new GridPane(); gp.setHgap(8); gp.setVgap(8);
        gp.addRow(0, new Label("SKU"), tfSku);
        gp.addRow(1, new Label("Name"), tfName);
        gp.addRow(2, new Label("Unit"), tfUnit);
        gp.addRow(3, new Label("Unit Price"), tfPrice);
        gp.addRow(4, new Label("Unit Cost"), tfCost);
        gp.addRow(5, new Label("Status"), cbActive);
        d.getDialogPane().setContent(gp);

        // Chuy·ªÉn gi√° tr·ªã ng∆∞·ªùi nh·∫≠p th√†nh ƒë·ªëi t∆∞·ª£ng Product
        d.setResultConverter(bt -> {
            if (bt == ButtonType.OK) {
                try {
                    Product p = new Product();
                    p.setSku(tfSku.getText());
                    p.setName(tfName.getText());
                    p.setUnit(tfUnit.getText());
                    p.setUnitPrice(new BigDecimal(tfPrice.getText().trim()));
                    p.setUnitCost(new BigDecimal(tfCost.getText().trim()));
                    p.setActive(cbActive.isSelected());
                    return p;
                } catch (Exception ex) {
                    AlertUtils.warn("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá", "Gi√°/Cost ph·∫£i l√† s·ªë h·ª£p l·ªá");
                    return null;
                }
            }
            return null;
        });
        return d;
    }

    // ====== C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≠a d∆∞·ªõi b·∫£ng ======
    private void updateStatus() {
        int selected = inventoryTable.getSelectionModel().getSelectedIndices().size();
        int total = inventoryTable.getItems().size();
        inventoryStatusLabel.setText(total + " item(s) ‚Ä¢ " + selected + " selected");
    }

    // ====== N·∫°p danh s√°ch c·ª≠a h√†ng t·ª´ DB ======
    private List<IdName> loadStores() {
        List<IdName> list = new ArrayList<>();
        String sql = "SELECT id, name FROM stores ORDER BY name";
        try (Connection cn = DBConnection.getInstance().getConnection();
             PreparedStatement ps = cn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) list.add(new IdName(rs.getLong(1), rs.getString(2)));
        } catch (SQLException ignored) {}
        return list;
    }

    // ====== N·∫°p danh s√°ch nh√† cung c·∫•p t·ª´ DB ======
    private List<IdName> loadSuppliers() {
        List<IdName> list = new ArrayList<>();
        String sql = "SELECT id, name FROM suppliers ORDER BY name";
        try (Connection cn = DBConnection.getInstance().getConnection();
             PreparedStatement ps = cn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) list.add(new IdName(rs.getLong(1), rs.getString(2)));
        } catch (SQLException ignored) {}
        return list;
    }

    // ====== L·ªõp ph·ª• tr·ª£ nh·ªè (id + name) d√πng cho ComboBox ======
    public static class IdName {
        public final long id;   // ID ƒë·ªëi t∆∞·ª£ng (store ho·∫∑c supplier)
        public final String name; // T√™n hi·ªÉn th·ªã
        public IdName(long id, String name) { this.id = id; this.name = name; }
        @Override public String toString() { return name + " (#" + id + ")"; } // hi·ªÉn th·ªã ƒë·∫πp trong combobox
    }
}
