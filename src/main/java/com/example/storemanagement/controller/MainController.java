package com.example.storemanagement.controller; // Khai b√°o package: nh√≥m l·ªõp controller c·ªßa ·ª©ng d·ª•ng v√†o c√πng kh√¥ng gian t√™n

/*
 * MainController.java ‚Äì Controller cho main.fxml
 *
 * Nhi·ªám v·ª• ch√≠nh:
 * 1) ƒêi·ªÅu h∆∞·ªõng gi·ªØa c√°c m√†n h√¨nh: Customers, Inventory, Finance.
 * 2) N·∫°p FXML con v√†o v√πng contentArea (StackPane) ·ªü gi·ªØa.
 * 3) Hi·ªÉn th·ªã tr·∫°ng th√°i (DB URL, user) ·ªü thanh status (statusLabel).
 * 4) X·ª≠ l√Ω c√°c action c∆° b·∫£n: About, Exit.
 *
 * Ph·ª• thu·ªôc t·ªëi thi·ªÉu:
 * - Ch·ªâ JavaFX + l·ªõp Main (ƒë·ªÉ ƒë·ªçc c·∫•u h√¨nh DB). Kh√¥ng ph·ª• thu·ªôc DAO/Service
 *   n√™n c√≥ th·ªÉ ch·∫°y ngay khi ch∆∞a t·∫°o xong backend.
 *
 * ƒê∆∞·ªùng d·∫´n t√†i nguy√™n (resource path):
 * - "/fxml/customers.fxml"
 * - "/fxml/inventory.fxml"
 * - "/fxml/finance.fxml"
 *
 * G·ª£i √Ω sau n√†y:
 * - C√≥ th·ªÉ t·∫°o l·ªõp NavigationService ƒë·ªÉ t√°ch vi·ªác n·∫°p view.
 * - C√≥ th·ªÉ th√™m Breadcrumb, ho·∫∑c TabPane n·∫øu mu·ªën nhi·ªÅu tab.
 *
 * (Phi√™n b·∫£n n√†y CH·ªà b·ªï sung/ch·ªânh s·ª≠a CH√ö TH√çCH cho d·ªÖ hi·ªÉu; KH√îNG ƒë·ªïi b·∫•t k·ª≥ d√≤ng code th·ª±c thi n√†o.)
 */

import java.io.IOException; // IOException: n√©m khi ƒë·ªçc/n·∫°p FXML th·∫•t b·∫°i
import java.net.URL; // URL: tham chi·∫øu t√†i nguy√™n trong classpath (FXML)
import java.util.Properties; // Properties: ƒë·ªçc c·∫•u h√¨nh DB t·ª´ Main

import com.example.storemanagement.Main; // Tham chi·∫øu t·ªõi Main ƒë·ªÉ l·∫•y dbProps

import javafx.event.ActionEvent; // S·ª± ki·ªán action (click menu/n√∫t)
import javafx.fxml.FXML; // Ch√∫ th√≠ch @FXML ƒë·ªÉ inject node/handler t·ª´ FXML
import javafx.fxml.FXMLLoader; // Ti·ªán √≠ch n·∫°p FXML th√†nh c√¢y Node
import javafx.scene.Node; // Ki·ªÉu t·ªïng qu√°t cho m·ªôt ph·∫ßn t·ª≠ UI
import javafx.scene.Parent; // G·ªëc UI khi n·∫°p FXML
import javafx.scene.control.Alert; // H·ªôp tho·∫°i th√¥ng b√°o/c·∫£nh b√°o
import javafx.scene.control.Label; // Nh√£n hi·ªÉn th·ªã vƒÉn b·∫£n
import javafx.scene.control.MenuItem;
import javafx.scene.layout.StackPane; // V√πng ch·ª©a x·∫øp ch·ªìng, d√πng l√†m contentArea
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;

public class MainController { // L·ªõp controller g·∫Øn v·ªõi main.fxml

    // Li√™n k·∫øt c√°c node trong main.fxml qua fx:id
    @FXML
    private StackPane contentArea; // v√πng hi·ªÉn th·ªã m√†n h√¨nh con (ƒë∆∞·ª£c ƒë·∫∑t fx:id="contentArea" trong main.fxml)
    @FXML
    private Label statusLabel; // nh√£n hi·ªÉn th·ªã th√¥ng tin tr·∫°ng th√°i (DB, m√†n h√¨nh ƒëang m·ªü, ...)
    @FXML
    private MenuItem toggleMusicItem;

    private MediaPlayer mediaPlayer;
    private boolean musicPlaying = false;

    /**
     * H√†m n√†y t·ª± ƒë·ªông ch·∫°y sau khi FXMLLoader n·∫°p xong FXML.
     * D√πng ƒë·ªÉ kh·ªüi t·∫°o giao di·ªán m·∫∑c ƒë·ªãnh (m√†n h√¨nh ch√†o + status DB).
     */
    @FXML
    public void initialize() { // ph∆∞∆°ng th·ª©c lifecycle c·ªßa JavaFX Controller

        playBackgroundMusic("/audio/music_background.mp3"); // üîä t·ª± ph√°t khi kh·ªüi ƒë·ªông

        // C·∫≠p nh·∫≠t status DB (ƒë·ªçc t·ª´ Main.getDbProps())
        updateStatusBar(); // hi·ªÉn th·ªã URL/User c·ªßa DB tr√™n thanh tr·∫°ng th√°i
        // Hi·ªÉn th·ªã m√†n h√¨nh ch√†o m·ª´ng m·∫∑c ƒë·ªãnh
        showWelcome(); // ƒë∆∞a m·ªôt Label ch√†o m·ª´ng v√†o contentArea ƒë·ªÉ tr√°nh tr·∫Øng m√†n h√¨nh
    }

    /**
     * M·ªü m√†n h√¨nh Qu·∫£n l√Ω Kh√°ch h√†ng.
     */
    @FXML
    public void openCustomers(ActionEvent event) { // handler cho MenuItem/Button "Customers"
        loadContent("/fxml/customers.fxml", "Customers"); // n·∫°p FXML con v√†o contentArea v√† c·∫≠p nh·∫≠t status
    }

    /**
     * M·ªü m√†n h√¨nh Qu·∫£n l√Ω Kho h√†ng.
     */
    @FXML
    public void openInventory(ActionEvent event) { // handler cho "Inventory"
        loadContent("/fxml/inventory.fxml", "Inventory"); // n·∫°p inventory.fxml
    }

    /**
     * M·ªü m√†n h√¨nh Qu·∫£n l√Ω T√†i ch√≠nh.
     */
    @FXML
    public void openFinance(ActionEvent event) { // handler cho "Finance"
        loadContent("/fxml/finance.fxml", "Finance"); // n·∫°p finance.fxml
    }

    /**
     * Hi·ªÉn th·ªã h·ªôp tho·∫°i gi·ªõi thi·ªáu.
     */
    @FXML
    public void openAbout(ActionEvent event) { // handler cho Menu "Help" ‚Üí "About"
        String content = "Store Management System\n" +
                "Phi√™n b·∫£n: 0.1 (Core, ch∆∞a c√≥ login)\n" +
                "T√°c gi·∫£: Ph·∫°m Ng·ªçc H∆∞ng ‚Äì MSSV: 20235342"; // n·ªôi dung gi·ªõi thi·ªáu
        showAlert(Alert.AlertType.INFORMATION, "About", content); // b·∫≠t h·ªôp tho·∫°i th√¥ng tin
    }

    /**
     * Tho√°t ·ª©ng d·ª•ng m·ªôt c√°ch an to√†n.
     */
    @FXML
    public void exitApp(ActionEvent event) { // handler cho "File" ‚Üí "Exit"
        // T·∫Øt to√†n b·ªô JavaFX Application Thread
        javafx.application.Platform.exit(); // ƒë√≥ng ·ª©ng d·ª•ng JavaFX an to√†n
    }

    // ================== Helpers ==================

    /**
     * Hi·ªÉn th·ªã m·ªôt m√†n h√¨nh ch√†o ƒë∆°n gi·∫£n khi kh·ªüi ƒë·ªông.
     * Kh√¥ng ph·ª• thu·ªôc FXML con ƒë·ªÉ tr√°nh l·ªói n·∫øu ch∆∞a t·∫°o customers.fxml, ...
     */
    private void showWelcome() { // t·∫°o Label ch√†o m·ª´ng v√† ƒë∆∞a v√†o v√πng content
        Label welcome = new Label("üëã Welcome!\nH√£y d√πng menu ho·∫∑c n√∫t b√™n tr√°i ƒë·ªÉ chuy·ªÉn m√†n h√¨nh.\n" +
                "Module hi·ªán c√≥: Customers, Inventory, Finance.\n" +
                "(C√≥ th·ªÉ th√™m Login/Menu kh√°c trong t∆∞∆°ng lai)"); // n·ªôi dung text c·ªßa nh√£n ch√†o m·ª´ng
        welcome.setWrapText(true); // cho ph√©p t·ª± xu·ªëng d√≤ng khi d√†i
        welcome.setStyle("-fx-font-size: 14px; -fx-padding: 24;"); // ƒë·ªãnh d·∫°ng giao di·ªán c∆° b·∫£n

        setContent(welcome); // thay th·∫ø n·ªôi dung hi·ªán t·∫°i c·ªßa contentArea b·∫±ng nh√£n n√†y
    }

    /**
     * T·∫£i FXML con v√† hi·ªÉn th·ªã v√†o contentArea. N·∫øu c√≥ l·ªói, b√°o Alert d·ªÖ hi·ªÉu.
     *
     * @param fxmlPath ƒë∆∞·ªùng d·∫´n trong classpath (v√≠ d·ª•: /fxml/customers.fxml)
     * @param title    t√™n hi·ªÉn th·ªã (kh√¥ng b·∫Øt bu·ªôc, d√πng cho th√¥ng ƒëi·ªáp)
     */
    private void loadContent(String fxmlPath, String title) { // helper trung t√¢m ƒë·ªÉ n·∫°p view theo ƒë∆∞·ªùng d·∫´n
        try {
            URL fxml = getClass().getResource(fxmlPath); // t√¨m FXML trong resources theo ƒë∆∞·ªùng d·∫´n cho tr∆∞·ªõc
            if (fxml == null) { // n·∫øu kh√¥ng th·∫•y file
                throw new IllegalStateException("Kh√¥ng t√¨m th·∫•y " + fxmlPath + " trong resources."); // n√©m l·ªói c√≥ th√¥ng
                                                                                                     // ƒëi·ªáp r√µ r√†ng
            }
            Parent view = FXMLLoader.load(fxml); // n·∫°p FXML th√†nh c√¢y UI (Parent)
            System.out.println("‚úÖ Loaded view: " + title);
            setContent(view); // ƒë·∫∑t c√¢y UI n√†y v√†o contentArea
            setStatusText("Opened: " + title); // c·∫≠p nh·∫≠t status bar th√¥ng b√°o ƒë√£ m·ªü m√†n n√†o
        } catch (IOException | IllegalStateException ex) { // b·∫Øt l·ªói IO (file h·ªèng/kh√¥ng ƒë·ªçc ƒë∆∞·ª£c) ho·∫∑c l·ªói tr·∫°ng th√°i
            System.err.println("‚ö†Ô∏è L·ªói khi load " + fxmlPath);
            ex.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Load View Failed",
                    "Kh√¥ng th·ªÉ n·∫°p m√†n h√¨nh: " + title + "\n" + ex.getMessage()); // th√¥ng b√°o l·ªói th√¢n thi·ªán cho ng∆∞·ªùi
                                                                                  // d√πng
        }
    }

    /**
     * Thay th·∫ø n·ªôi dung ·ªü contentArea b·∫±ng node m·ªõi.
     */
    private void setContent(Node node) { // helper g√≥i g·ªçn thao t√°c thay ƒë·ªïi n·ªôi dung trung t√¢m
        contentArea.getChildren().setAll(node); // x√≥a m·ªçi ph·∫ßn t·ª≠ c≈© v√† th√™m duy nh·∫•t node m·ªõi v√†o StackPane
    }

    /**
     * C·∫≠p nh·∫≠t thanh tr·∫°ng th√°i d·ª±a tr√™n c·∫•u h√¨nh DB ƒëang d√πng.
     */
    private void updateStatusBar() { // l·∫•y th√¥ng tin t·ª´ Main.getDbProps() v√† hi·ªÉn th·ªã
        Properties p = Main.getDbProps(); // truy xu·∫•t c·∫•u h√¨nh DB ƒë√£ n·∫°p ·ªü Main
        String url = p != null ? p.getProperty("url", "jdbc:mysql://localhost:3306/store_management") : "(unknown)"; // l·∫•y
                                                                                                                     // URL
                                                                                                                     // ho·∫∑c
                                                                                                                     // m·∫∑c
                                                                                                                     // ƒë·ªãnh
        String user = p != null ? p.getProperty("user", "root") : "(unknown)"; // l·∫•y user ho·∫∑c m·∫∑c ƒë·ªãnh
        setStatusText("DB: " + url + "  |  User: " + user); // gh√©p chu·ªói r·ªìi ƒë·∫∑t v√†o statusLabel
    }

    /**
     * ƒê·∫∑t n·ªôi dung text cho statusLabel (null-safe).
     */
    private void setStatusText(String text) { // thay ƒë·ªïi n·ªôi dung nh√£n tr·∫°ng th√°i n·∫øu ƒë√£ ƒë∆∞·ª£c inject
        if (statusLabel != null) { // tr√°nh NullPointerException n·∫øu FXML ch∆∞a map ƒë√∫ng
            statusLabel.setText(text); // c·∫≠p nh·∫≠t vƒÉn b·∫£n hi·ªÉn th·ªã
        }
    }

    /** Hi·ªÉn th·ªã Alert ti·ªán l·ª£i */
    private void showAlert(Alert.AlertType type, String title, String content) { // helper t·∫°o h·ªôp tho·∫°i theo lo·∫°i
        Alert a = new Alert(type); // kh·ªüi t·∫°o Alert v·ªõi ki·ªÉu (INFORMATION/ERROR/...)
        a.setTitle(title); // ti√™u ƒë·ªÅ h·ªôp tho·∫°i
        a.setHeaderText(null); // b·ªè header cho g·ªçn
        a.setContentText(content); // n·ªôi dung th√¥ng ƒëi·ªáp
        a.show(); // hi·ªÉn th·ªã (kh√¥ng ch·∫∑n lu·ªìng)
    }

    private void playBackgroundMusic(String resourcePath) {
        try {
            URL resource = getClass().getResource(resourcePath);
            if (resource == null) {
                System.err.println("Kh√¥ng t√¨m th·∫•y file nh·∫°c: " + resourcePath);
                return;
            }

            Media media = new Media(resource.toExternalForm());
            mediaPlayer = new MediaPlayer(media);
            mediaPlayer.setCycleCount(MediaPlayer.INDEFINITE); // Loop v√¥ h·∫°n
            mediaPlayer.setVolume(0.25); // √Çm l∆∞·ª£ng nh·∫π
            mediaPlayer.play();
            musicPlaying = true;

            if (toggleMusicItem != null)
                toggleMusicItem.setText("üîä T·∫Øt nh·∫°c n·ªÅn");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @FXML
    private void onToggleMusic() {
        if (mediaPlayer == null)
            return;
        if (musicPlaying) {
            mediaPlayer.pause();
            toggleMusicItem.setText("üîà B·∫≠t nh·∫°c n·ªÅn");
        } else {
            mediaPlayer.play();
            toggleMusicItem.setText("üîä T·∫Øt nh·∫°c n·ªÅn");
        }
        musicPlaying = !musicPlaying;
    }

    public void stopMusic() {
        if (mediaPlayer != null)
            mediaPlayer.stop();
    }
}
