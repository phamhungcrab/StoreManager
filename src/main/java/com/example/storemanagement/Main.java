package com.example.storemanagement;

/*
 * =============================================================
 *  Store Management System ‚Äì Java + MySQL (no login for now)
 *  Main.java ‚Äì ƒêi·ªÉm kh·ªüi ch·∫°y JavaFX, n·∫°p FXML ch√≠nh, ƒë·ªçc db.properties
 *
 *  Th∆∞ m·ª•c li√™n quan (theo README):
 *  src/main/resources/
 *    ‚îú‚îÄ fxml/main.fxml            ‚Üê Giao di·ªán khung ch√≠nh (controller: MainController)
 *    ‚îú‚îÄ fxml/customers.fxml       ‚Üê M√†n h√¨nh Kh√°ch h√†ng
 *    ‚îú‚îÄ fxml/inventory.fxml       ‚Üê M√†n h√¨nh Kho h√†ng
 *    ‚îú‚îÄ fxml/finance.fxml         ‚Üê M√†n h√¨nh T√†i ch√≠nh
 *    ‚îú‚îÄ css/style.css             ‚Üê CSS cho UI (t√πy ch·ªçn)
 *    ‚îî‚îÄ database/db.properties    ‚Üê Th√¥ng tin k·∫øt n·ªëi MySQL
 *
 *  C√°ch ch·∫°y (Maven):
 *  mvn clean compile
 *  mvn exec:java -Dexec.mainClass="com.example.storemanagement.Main"
 *
 *  N·∫øu d√πng JavaFX SDK ƒë·ªôc l·∫≠p (kh√¥ng d√πng BOM), VM Options c·∫ßn:
 *    --module-path %PATH_TO_FX% --add-modules javafx.controls,javafx.fxml
 *  (Tr√™n macOS/Linux d√πng $PATH_TO_FX)
 *
 *  G·ª£i √Ω ki·∫øn tr√∫c:
 *  - Controller: com.example.storemanagement.controller.*
 *  - Service:    com.example.storemanagement.service.*
 *  - DAO:        com.example.storemanagement.dao.* (JDBC ‚Üí MySQL)
 *  - Model:      com.example.storemanagement.model.*
 *  - Util:       com.example.storemanagement.util.*
 *
 *  Ghi ch√∫:
 *  - File n√†y **kh√¥ng** g·ªçi tr·ª±c ti·∫øp DAO/Service ƒë·ªÉ ƒë·∫£m b·∫£o compile ch·∫°y ƒë∆∞·ª£c
 *    ngay c·∫£ khi b·∫°n ch∆∞a t·∫°o xong c√°c l·ªõp c√≤n l·∫°i. Ph·∫ßn "ki·ªÉm tra k·∫øt n·ªëi DB"
 *    c√≥ v√≠ d·ª• nh∆∞ng ƒë∆∞·ª£c COMMENT l·∫°i. B·∫°n m·ªü comment khi ƒë√£ t·∫°o DBConnection.
 * =============================================================
 */

import java.io.InputStream;
import java.net.URL;
import java.util.Properties;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Label;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class Main extends Application {

    // T√™n app hi·ªÉn th·ªã tr√™n c·ª≠a s·ªï
    public static final String APP_NAME = "Store Management System";

    // Thu·ªôc t√≠nh CSDL ƒë·ªçc t·ª´ resources/database/db.properties
    private static Properties dbProps;

    public static void main(String[] args) {
        // ƒêi·ªÉm v√†o chu·∫©n JavaFX ‚Äì s·∫Ω g·ªçi start(Stage)
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        // 1) ƒê·∫∑t ti√™u ƒë·ªÅ c·ª≠a s·ªï
        primaryStage.setTitle(APP_NAME);

        // 2) ƒê·ªçc c·∫•u h√¨nh DB (n·∫øu c√≥). Kh√¥ng b·∫Øt bu·ªôc ƒë·ªÉ ch·∫°y UI.
        dbProps = loadDbProperties();

        // 3) C·ªë g·∫Øng n·∫°p giao di·ªán ch√≠nh t·ª´ FXML
        try {
            Scene scene = loadMainScene();
            attachCssIfPresent(scene, "/css/style.css");
            primaryStage.setScene(scene);
            primaryStage.show();
        } catch (Exception ex) {
            // N·∫øu FXML ho·∫∑c controller ch∆∞a s·∫µn s√†ng ‚Üí d·ª±ng giao di·ªán d·ª± ph√≤ng
            Scene fallback = buildFallbackScene(ex);
            primaryStage.setScene(fallback);
            primaryStage.show();
        }

        // 4) (T√ôY CH·ªåN) Ki·ªÉm tra k·∫øt n·ªëi DB khi b·∫°n ƒë√£ c√≥ DBConnection
        //    ‚Üí B·ªé COMMENT sau khi t·∫°o l·ªõp dao.DBConnection v√† MySQL Connector
        // try {
        //     var conn = com.example.storemanagement.dao.DBConnection.getInstance().getConnection();
        //     if (conn != null && !conn.isClosed()) {
        //         info("K·∫øt n·ªëi MySQL th√†nh c√¥ng: " + dbProps.getProperty("url", "(ch∆∞a thi·∫øt l·∫≠p)") );
        //     }
        // } catch (Exception e) {
        //     warn("Kh√¥ng th·ªÉ k·∫øt n·ªëi MySQL. Ki·ªÉm tra db.properties & MySQL service.\n" + e.getMessage());
        // }
    }

    /**
     * N·∫°p Scene t·ª´ main.fxml (n·∫±m trong resources/fxml/main.fxml)
     */
    private Scene loadMainScene() throws Exception {
        URL fxml = getResource("/fxml/main.fxml");
        if (fxml == null) {
            throw new IllegalStateException("Kh√¥ng t√¨m th·∫•y /fxml/main.fxml trong resources.");
        }
        Parent root = FXMLLoader.load(fxml);
        Scene scene = new Scene(root);
        return scene;
    }

    /**
     * ƒê·ªçc file c·∫•u h√¨nh DB t·ª´ classpath: /database/db.properties
     * Tr·∫£ v·ªÅ Properties r·ªóng n·∫øu kh√¥ng t√¨m th·∫•y ƒë·ªÉ kh√¥ng ch·∫∑n vi·ªác ch·∫°y UI.
     */
    private Properties loadDbProperties() {
        Properties props = new Properties();
        String path = "/database/db.properties";
        try (InputStream in = getResourceAsStream(path)) {
            if (in != null) {
                props.load(in);
            } else {
                warn("Kh√¥ng t√¨m th·∫•y " + path + ". S·∫Ω d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh.");
            }
        } catch (Exception e) {
            warn("L·ªói ƒë·ªçc " + path + ": " + e.getMessage());
        }

        // Gi√° tr·ªã m·∫∑c ƒë·ªãnh an to√†n (kh√¥ng k·∫øt n·ªëi th·∫≠t)
        props.putIfAbsent("url", "jdbc:mysql://localhost:3306/store_management");
        props.putIfAbsent("user", "root");
        props.putIfAbsent("password", "aaaa");
        return props;
    }

    /**
     * G·∫Øn CSS n·∫øu file t·ªìn t·∫°i trong classpath.
     */
    private void attachCssIfPresent(Scene scene, String cssClasspathPath) {
        URL css = getResource(cssClasspathPath);
        if (css != null) {
            scene.getStylesheets().add(css.toExternalForm());
        }
    }

    /**
     * UI d·ª± ph√≤ng khi ch∆∞a c√≥ FXML/Controller ‚Äì gi√∫p b·∫°n ch·∫°y th·ª≠ ngay.
     * Hi·ªÉn th·ªã th√¥ng b√°o c·∫ßn t·∫°o fxml & controller theo ƒë√∫ng c·∫•u tr√∫c.
     */
    private Scene buildFallbackScene(Exception cause) {
        BorderPane root = new BorderPane();
        String message = "üëã Xin ch√†o, d·ª± √°n ƒë√£ ch·∫°y!\n\n" +
                "Ch∆∞a n·∫°p ƒë∆∞·ª£c main.fxml. H√£y t·∫°o: src/main/resources/fxml/main.fxml\n" +
                "Controller g·ª£i √Ω: com.example.storemanagement.controller.MainController\n\n" +
                "Chi ti·∫øt l·ªói: " + (cause != null ? cause.getMessage() : "(kh√¥ng r√µ)");
        Label label = new Label(message);
        label.setWrapText(true);
        label.setStyle("-fx-padding: 24; -fx-font-size: 14px;");
        root.setCenter(label);
        return new Scene(root, 960, 600);
    }

    // ===== Helpers nh·ªè cho Alert =====
    private void info(String msg) {
        showAlert(Alert.AlertType.INFORMATION, "Th√¥ng b√°o", msg);
    }

    private void warn(String msg) {
        showAlert(Alert.AlertType.WARNING, "Ch√∫ √Ω", msg);
    }

    private void showAlert(Alert.AlertType type, String title, String msg) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(msg);
        alert.show();
    }

    // ===== Truy xu·∫•t t√†i nguy√™n ti·ªán l·ª£i =====
    private URL getResource(String path) {
        return getClass().getResource(path);
    }

    private InputStream getResourceAsStream(String path) {
        return getClass().getResourceAsStream(path);
    }

    /**
     * Cho ph√©p module kh√°c ƒë·ªçc c·∫•u h√¨nh DB ƒë√£ load (n·∫øu c·∫ßn).
     * V√≠ d·ª• trong DAO b·∫°n c√≥ th·ªÉ d√πng Main.getDbProps().getProperty("url").
     */
    public static Properties getDbProps() {
        return dbProps;
    }
}
