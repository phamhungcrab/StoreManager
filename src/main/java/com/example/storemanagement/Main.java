package com.example.storemanagement;

/*
 * =============================================================
 *  Store Management System ‚Äì Java + MySQL (no login for now)
 *  Main.java ‚Äì ƒêi·ªÉm kh·ªüi ch·∫°y JavaFX, n·∫°p FXML ch√≠nh, ƒë·ªçc db.properties
 *
 *
 *  Th∆∞ m·ª•c li√™n quan (theo README):
 *  src/main/resources/
 *    ‚îú‚îÄ fxml/main.fxml            ‚Üê Giao di·ªán khung ch√≠nh (controller: MainController)
 *    ‚îú‚îÄ fxml/customers.fxml       ‚Üê M√†n h√¨nh Kh√°ch h√†ng
 *    ‚îú‚îÄ fxml/inventory.fxml       ‚Üê M√†n h√¨nh Kho h√†ng
 *    ‚îú‚îÄ fxml/finance.fxml         ‚Üê M√†n h√¨nh T√†i ch√≠nh
 *    ‚îú‚îÄ css/style.css             ‚Üê CSS cho UI (t√πy ch·ªçn)
 *    ‚îî‚îÄ database/db.properties    ‚Üê Th√¥ng tin k·∫øt n·ªëi MySQL
 *
 *  C√°ch ch·∫°y (Maven):
 *  mvn clean compile
 *  mvn exec:java -Dexec.mainClass="com.example.storemanagement.Main"
 *
 *  N·∫øu d√πng JavaFX SDK ƒë·ªôc l·∫≠p (kh√¥ng d√πng BOM), VM Options c·∫ßn:
 *    --module-path %PATH_TO_FX% --add-modules javafx.controls,javafx.fxml
 *  (Tr√™n macOS/Linux d√πng $PATH_TO_FX)
 *
 *  G·ª£i √Ω ki·∫øn tr√∫c:
 *  - Controller: com.example.storemanagement.controller.*
 *  - Service:    com.example.storemanagement.service.*
 *  - DAO:        com.example.storemanagement.dao.* (JDBC ‚Üí MySQL)
 *  - Model:      com.example.storemanagement.model.*
 *  - Util:       com.example.storemanagement.util.*
 *
 *  Ghi ch√∫:
 *  - File n√†y **kh√¥ng** g·ªçi tr·ª±c ti·∫øp DAO/Service ƒë·ªÉ ƒë·∫£m b·∫£o compile ch·∫°y ƒë∆∞·ª£c
 *    ngay c·∫£ khi b·∫°n ch∆∞a t·∫°o xong c√°c l·ªõp c√≤n l·∫°i. Ph·∫ßn "ki·ªÉm tra k·∫øt n·ªëi DB"
 *    c√≥ v√≠ d·ª• nh∆∞ng ƒë∆∞·ª£c COMMENT l·∫°i. B·∫°n m·ªü comment khi ƒë√£ t·∫°o DBConnection.
 * =============================================================
 */
// 1Ô∏è‚É£ Th√™m import:
import java.io.InputStream;
import java.net.URL;
import java.util.Properties;

import javafx.application.Application;
import javafx.fxml.FXMLLoader; // Import l·ªõp InputStream ƒë·ªÉ ƒë·ªçc file t·ª´ classpath
import javafx.scene.Parent; // Import URL ƒë·ªÉ tham chi·∫øu t√†i nguy√™n (FXML/CSS) trong classpath
import javafx.scene.Scene; // Import Properties ƒë·ªÉ n·∫°p c·∫•u h√¨nh t·ª´ db.properties
import javafx.scene.control.Alert; // L·ªõp n·ªÅn c·ªßa m·ªçi ·ª©ng d·ª•ng JavaFX
import javafx.scene.control.Label; // Ti·ªán √≠ch n·∫°p file FXML th√†nh c√¢y UI
import javafx.scene.image.Image;
import javafx.scene.layout.BorderPane; // G·ªëc c·ªßa c√¢y UI (root node)
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.stage.Stage; // C·∫£nh (scene) ch·ª©a c√°c node UI

public class Main extends Application { // Khai b√°o l·ªõp Main k·∫ø th·ª´a Application ƒë·ªÉ ch·∫°y JavaFX
    private MediaPlayer mediaPlayer;
    // T√™n app hi·ªÉn th·ªã tr√™n c·ª≠a s·ªï
    public static final String APP_NAME = "Qu·∫£n l√Ω c·ª≠a h√†ng"; // H·∫±ng s·ªë ti√™u ƒë·ªÅ c·ª≠a s·ªï

    // Thu·ªôc t√≠nh CSDL ƒë·ªçc t·ª´ resources/database/db.properties
    private static Properties dbProps; // Bi·∫øn tƒ©nh gi·ªØ c·∫•u h√¨nh DB ƒë·ªÉ d√πng chung

    public static void main(String[] args) { // H√†m main ti√™u chu·∫©n c·ªßa Java
        // ƒêi·ªÉm v√†o chu·∫©n JavaFX ‚Äì s·∫Ω g·ªçi start(Stage)
        launch(args); // G·ªçi launch() ƒë·ªÉ kh·ªüi ƒë·ªông runtime JavaFX, sau ƒë√≥ g·ªçi start()
    }

    @Override // Ch√∫ th√≠ch cho tr√¨nh bi√™n d·ªãch bi·∫øt ta ƒëang ghi ƒë√® ph∆∞∆°ng th·ª©c t·ª´ l·ªõp cha
    public void start(Stage primaryStage) { // JavaFX s·∫Ω truy·ªÅn v√†o Stage ch√≠nh (c·ª≠a s·ªï)

        // üîä G·ªçi h√†m ph√°t nh·∫°c n·ªÅn
        playBackgroundMusic("/audio/music_background.mp3");

        // 1) ƒê·∫∑t ti√™u ƒë·ªÅ c·ª≠a s·ªï
        primaryStage.setTitle(APP_NAME); // G√°n ti√™u ƒë·ªÅ cho c·ª≠a s·ªï ch√≠nh

        // 2Ô∏è‚É£ N·∫°p icon t·ª´ resources v√† g·∫Øn v√†o c·ª≠a s·ªï
        try {
            Image icon = new Image(getClass().getResourceAsStream("/images/logostb.jpeg"));
            primaryStage.getIcons().add(icon);
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y /images/logostb.jpeg: " + e.getMessage());
        }

        // 2) ƒê·ªçc c·∫•u h√¨nh DB (n·∫øu c√≥). Kh√¥ng b·∫Øt bu·ªôc ƒë·ªÉ ch·∫°y UI.
        dbProps = loadDbProperties(); // N·∫°p db.properties; n·∫øu thi·∫øu v·∫´n tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh

        // 3) C·ªë g·∫Øng n·∫°p giao di·ªán ch√≠nh t·ª´ FXML
        try { // B·ªçc trong try-catch ƒë·ªÉ n·∫øu FXML thi·∫øu th√¨ v·∫´n ch·∫°y v·ªõi UI d·ª± ph√≤ng
            Scene scene = loadMainScene(); // Th·ª≠ n·∫°p main.fxml th√†nh m·ªôt Scene
            attachCssIfPresent(scene, "/css/style.css"); // N·∫øu c√≥ CSS trong classpath th√¨ g·∫Øn v√†o Scene
            primaryStage.setScene(scene); // ƒê·∫∑t Scene ch√≠nh cho Stage
            primaryStage.show(); // Hi·ªÉn th·ªã c·ª≠a s·ªï ·ª©ng d·ª•ng
        } catch (Exception ex) { // N·∫øu c√≥ l·ªói (v√≠ d·ª• thi·∫øu FXML), s·∫Ω v√†o nh√°nh n√†y
            // N·∫øu FXML ho·∫∑c controller ch∆∞a s·∫µn s√†ng ‚Üí d·ª±ng giao di·ªán d·ª± ph√≤ng
            Scene fallback = buildFallbackScene(ex); // T·∫°o Scene ƒë∆°n gi·∫£n th√¥ng b√°o c·∫ßn t·∫°o FXML
            primaryStage.setScene(fallback); // G√°n Scene d·ª± ph√≤ng v√†o Stage
            primaryStage.show(); // V·∫´n hi·ªÉn th·ªã app ƒë·ªÉ dev d·ªÖ s·ª≠a
        }

        // 4) (T√ôY CH·ªåN) Ki·ªÉm tra k·∫øt n·ªëi DB khi b·∫°n ƒë√£ c√≥ DBConnection
        // ‚Üí B·ªé COMMENT sau khi t·∫°o l·ªõp dao.DBConnection v√† MySQL Connector
        try {
            var conn = com.example.storemanagement.dao.DBConnection.getInstance().getConnection(); // L·∫•y k·∫øt n·ªëi DB t·ª´
                                                                                                   // singleton
            if (conn != null && !conn.isClosed()) { // Ki·ªÉm tra k·∫øt n·ªëi h·ª£p l·ªá
                info("K·∫øt n·ªëi MySQL th√†nh c√¥ng: " + dbProps.getProperty("url", "(ch∆∞a thi·∫øt l·∫≠p)")); // B√°o th√¥ng tin
                                                                                                     // th√†nh c√¥ng
            }
        } catch (Exception e) {
            warn("Kh√¥ng th·ªÉ k·∫øt n·ªëi MySQL. Ki·ªÉm tra db.properties & MySQL service.\n" + e.getMessage()); // C·∫£nh b√°o khi
                                                                                                         // k·∫øt n·ªëi l·ªói
        }
    }

    private void playBackgroundMusic(String resourcePath) {
        try {
            URL resource = getClass().getResource(resourcePath);
            if (resource == null) {
                System.err.println("Kh√¥ng t√¨m th·∫•y file nh·∫°c: " + resourcePath);
                return;
            }

            Media media = new Media(resource.toExternalForm());
            mediaPlayer = new MediaPlayer(media);
            mediaPlayer.setCycleCount(MediaPlayer.INDEFINITE); // üîÅ Loop v√¥ h·∫°n
            mediaPlayer.setVolume(0.9); // √Çm l∆∞·ª£ng 90%
            mediaPlayer.play();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void stop() {
        if (mediaPlayer != null) {
            mediaPlayer.stop();
        }
    }

    /**
     * N·∫°p Scene t·ª´ main.fxml (n·∫±m trong resources/fxml/main.fxml)
     */
    private Scene loadMainScene() throws Exception { // Ph∆∞∆°ng th·ª©c helper ƒë·ªÉ n·∫°p Scene ch√≠nh t·ª´ FXML
        URL fxml = getResource("/fxml/main.fxml"); // T√¨m t√†i nguy√™n main.fxml trong classpath

        if (fxml == null) { // N·∫øu kh√¥ng t√¨m th·∫•y URL
            throw new IllegalStateException("Kh√¥ng t√¨m th·∫•y /fxml/main.fxml trong resources."); // N√©m l·ªói ƒë·ªÉ r∆°i v√†o
                                                                                                // catch ·ªü start()
        }
        Parent root = FXMLLoader.load(fxml); // D√πng FXMLLoader ƒë·ªÉ ƒë·ªçc FXML v√† t·∫°o c√¢y node UI
        Scene scene = new Scene(root); // G√≥i root node v√†o m·ªôt Scene m·ªõi
        // Scene scene = new
        // Scene(FXMLLoader.load(getClass().getResource("/fxml/customers.fxml")));

        return scene; // Tr·∫£ v·ªÅ Scene ƒë√£ t·∫°o
    }

    /**
     * ƒê·ªçc file c·∫•u h√¨nh DB t·ª´ classpath: /database/db.properties
     * Tr·∫£ v·ªÅ Properties r·ªóng n·∫øu kh√¥ng t√¨m th·∫•y ƒë·ªÉ kh√¥ng ch·∫∑n vi·ªác ch·∫°y UI.
     */
    private Properties loadDbProperties() { // Ph∆∞∆°ng th·ª©c helper n·∫°p c·∫•u h√¨nh DB an to√†n
        Properties props = new Properties(); // T·∫°o ƒë·ªëi t∆∞·ª£ng Properties tr·ªëng
        String path = "/database/db.properties"; // ƒê∆∞·ªùng d·∫´n file c·∫•u h√¨nh trong resources
        try (InputStream in = getResourceAsStream(path)) { // M·ªü lu·ªìng ƒë·ªçc file qua classpath (t·ª± ƒë√≥ng nh·ªù
                                                           // try-with-resources)
            if (in != null) { // N·∫øu t√¨m th·∫•y file
                props.load(in); // N·∫°p c√°c c·∫∑p key=value v√†o ƒë·ªëi t∆∞·ª£ng Properties
                // info("Finded path for properties. \n");
            } else { // N·∫øu kh√¥ng c√≥ file trong resources
                warn("Kh√¥ng t√¨m th·∫•y " + path + ". S·∫Ω d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh."); // C·∫£nh b√°o nh∆∞ng kh√¥ng d·ª´ng ch∆∞∆°ng
                                                                                // tr√¨nh
            }
        } catch (Exception e) { // B·∫Øt m·ªçi l·ªói IO ƒë·ªÉ kh√¥ng l√†m crash UI
            warn("L·ªói ƒë·ªçc " + path + ": " + e.getMessage()); // Th√¥ng b√°o l·ªói ƒë·ªçc file
        }

        // Gi√° tr·ªã m·∫∑c ƒë·ªãnh an to√†n (kh√¥ng k·∫øt n·ªëi th·∫≠t)
        // info("manual connection \n");
        // props.putIfAbsent("url", "jdbc:mysql://localhost:3306/store_management"); //
        // N·∫øu ch∆∞a c√≥ key url th√¨ ƒë·∫∑t m·∫∑c ƒë·ªãnh
        // props.putIfAbsent("user", "root"); // M·∫∑c ƒë·ªãnh user root (c√≥ th·ªÉ kh√°c m√°y
        // b·∫°n)
        // props.putIfAbsent("password", "aaaa"); // M·∫∑c ƒë·ªãnh password m·∫´u (h√£y ƒë·ªïi
        // trong db.properties)
        return props; // Tr·∫£ v·ªÅ Properties (c√≥ th·ªÉ l√† file th·∫≠t, c√≥ th·ªÉ l√† m·∫∑c ƒë·ªãnh)
    }

    /**
     * G·∫Øn CSS n·∫øu file t·ªìn t·∫°i trong classpath.
     */
    private void attachCssIfPresent(Scene scene, String cssClasspathPath) { // G·∫Øn stylesheet cho Scene n·∫øu c√≥
        URL css = getResource(cssClasspathPath); // T√¨m CSS trong resources theo ƒë∆∞·ªùng d·∫´n classpath
        if (css != null) { // N·∫øu t√¨m th·∫•y
            scene.getStylesheets().add(css.toExternalForm()); // Chuy·ªÉn URL th√†nh chu·ªói v√† th√™m v√†o danh s√°ch
                                                              // stylesheets
        }
    }

    /**
     * UI d·ª± ph√≤ng khi ch∆∞a c√≥ FXML/Controller ‚Äì gi√∫p b·∫°n ch·∫°y th·ª≠ ngay.
     * Hi·ªÉn th·ªã th√¥ng b√°o c·∫ßn t·∫°o fxml & controller theo ƒë√∫ng c·∫•u tr√∫c.
     */
    private Scene buildFallbackScene(Exception cause) { // T·∫°o Scene ƒë∆°n gi·∫£n khi FXML ch∆∞a s·∫µn s√†ng
        BorderPane root = new BorderPane(); // B·ªë c·ª•c BorderPane ƒë·ªÉ ƒë·∫∑t n·ªôi dung gi·ªØa
        String message = "üëã Xin ch√†o, d·ª± √°n ƒë√£ ch·∫°y!\n\n" +
                "Ch∆∞a n·∫°p ƒë∆∞·ª£c main.fxml. H√£y t·∫°o: src/main/resources/fxml/main.fxml\n" +
                "Controller g·ª£i √Ω: com.example.storemanagement.controller.MainController\n\n" +
                "Chi ti·∫øt l·ªói: " + (cause != null ? cause.getMessage() : "(kh√¥ng r√µ)"); // Chu·ªói th√¥ng b√°o h∆∞·ªõng d·∫´n
                                                                                        // nhanh
        Label label = new Label(message); // T·∫°o Label hi·ªÉn th·ªã th√¥ng ƒëi·ªáp
        label.setWrapText(true); // Cho ph√©p xu·ªëng d√≤ng t·ª± ƒë·ªông khi d√†i
        label.setStyle("-fx-padding: 24; -fx-font-size: 14px;"); // Th√™m padding v√† c·ª° ch·ªØ cho d·ªÖ ƒë·ªçc
        root.setCenter(label); // ƒê·∫∑t Label v√†o gi·ªØa BorderPane
        return new Scene(root, 960, 600); // T·∫°o Scene v·ªõi k√≠ch th∆∞·ªõc m·∫∑c ƒë·ªãnh ƒë·ªÉ hi·ªÉn th·ªã
    }

    // ===== Helpers nh·ªè cho Alert =====
    private void info(String msg) { // Hi·ªÉn th·ªã h·ªôp tho·∫°i th√¥ng tin
        showAlert(Alert.AlertType.INFORMATION, "Th√¥ng b√°o", msg); // G·ªçi helper chung v·ªõi ki·ªÉu INFORMATION
    }

    private void warn(String msg) { // Hi·ªÉn th·ªã h·ªôp tho·∫°i c·∫£nh b√°o
        showAlert(Alert.AlertType.WARNING, "Ch√∫ √Ω", msg); // G·ªçi helper chung v·ªõi ki·ªÉu WARNING
    }

    private void showAlert(Alert.AlertType type, String title, String msg) { // Helper t·ªïng cho m·ªçi lo·∫°i Alert
        Alert alert = new Alert(type); // T·∫°o Alert theo ki·ªÉu ƒë√£ ch·ªâ ƒë·ªãnh
        alert.setTitle(title); // ƒê·∫∑t ti√™u ƒë·ªÅ h·ªôp tho·∫°i
        alert.setHeaderText(null); // B·ªè ph·∫ßn header ƒë·ªÉ giao di·ªán g·ªçn
        alert.setContentText(msg); // N·ªôi dung th√¥ng b√°o
        alert.show(); // Hi·ªÉn th·ªã ngay (kh√¥ng ch·∫∑n lu·ªìng)
    }

    // ===== Truy xu·∫•t t√†i nguy√™n ti·ªán l·ª£i =====
    private URL getResource(String path) { // Helper l·∫•y URL t√†i nguy√™n theo ƒë∆∞·ªùng d·∫´n classpath (b·∫Øt ƒë·∫ßu b·∫±ng "/")
        return getClass().getResource(path); // Tr·∫£ v·ªÅ URL; null n·∫øu kh√¥ng t·ªìn t·∫°i
    }

    private InputStream getResourceAsStream(String path) { // Helper l·∫•y lu·ªìng InputStream c·ªßa t√†i nguy√™n
        return getClass().getResourceAsStream(path); // Tr·∫£ v·ªÅ InputStream; null n·∫øu kh√¥ng t√¨m th·∫•y
    }

    /**
     * Cho ph√©p module kh√°c ƒë·ªçc c·∫•u h√¨nh DB ƒë√£ load (n·∫øu c·∫ßn).
     * V√≠ d·ª• trong DAO b·∫°n c√≥ th·ªÉ d√πng Main.getDbProps().getProperty("url").
     */
    public static Properties getDbProps() { // Getter tƒ©nh ƒë·ªÉ truy xu·∫•t c·∫•u h√¨nh DB ·ªü n∆°i kh√°c
        return dbProps; // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng Properties ƒë√£ n·∫°p
    }
}