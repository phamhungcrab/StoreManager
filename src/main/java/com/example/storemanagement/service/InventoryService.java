package com.example.storemanagement.service; // Package service: ch·ª©a l·ªõp x·ª≠ l√Ω nghi·ªáp v·ª•

/*
 * InventoryService ‚Äì T·∫ßng nghi·ªáp v·ª• cho Kho h√†ng / T√†i nguy√™n
 * üéØ Vai tr√≤:
 *   - Qu·∫£n l√Ω CRUD s·∫£n ph·∫©m (g·ªçi xu·ªëng ProductDAO).
 *   - Nh·∫≠p/Xu·∫•t kho th√¥ng qua b·∫£ng stock_moves (qua ProductDAO), trigger DB s·∫Ω c·∫≠p nh·∫≠t b·∫£ng t·ªìn.
 *   - L·∫•y d·ªØ li·ªáu t·ªïng quan t·ªìn kho t·ª´ view v_inventory_overview.
 * ‚ö†Ô∏è File n√†y ch·ªâ th√™m ch√∫ th√≠ch gi·∫£i th√≠ch; kh√¥ng ƒë·ªïi logic.
 */

import java.math.BigDecimal; // D√πng BigDecimal cho gi√° ƒë·ªÉ ch√≠nh x√°c s·ªë h·ªçc
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException; // N√©m ng∆∞·ª£c ra cho UI/Controller hi·ªÉn th·ªã l·ªói th√¢n thi·ªán
import java.util.List; // Danh s√°ch
import java.util.Optional; // K·∫øt qu·∫£ c√≥/kh√¥ng c√≥

import com.example.storemanagement.dao.DBConnection;
import com.example.storemanagement.dao.ProductDAO; // DAO t∆∞∆°ng t√°c DB (products, stock_moves, view)
import com.example.storemanagement.model.Product; // POJO Product

public class InventoryService { // L·ªõp service trung gian gi·ªØa Controller v√† DAO

    private final ProductDAO productDAO = new ProductDAO(); // Kh·ªüi t·∫°o DAO; sau n√†y c√≥ th·ªÉ thay b·∫±ng DI

    // ===================== S·∫£n ph·∫©m =====================

    public long addProduct(Product p) throws SQLException {
        validateProduct(p, true);
        long id = productDAO.insert(p);

        // üîπ T·ª± ƒë·ªông t·∫°o inventory = 0 cho s·∫£n ph·∫©m n√†y ·ªü m·ªçi c·ª≠a h√†ng
        try (Connection cn = DBConnection.getInstance().getConnection();
                PreparedStatement ps = cn.prepareStatement(
                        "INSERT INTO inventory(store_id, product_id, quantity) " +
                                "SELECT id, ?, 0 FROM stores")) {
            ps.setLong(1, id);
            ps.executeUpdate();
        }

        return id;
    }

    public boolean updateProduct(Product p) throws SQLException { // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
        if (p.getId() == null)
            throw new IllegalArgumentException("Thi·∫øu ID s·∫£n ph·∫©m"); // Update ph·∫£i c√≥ ID
        validateProduct(p, false); // Ki·ªÉm tra d·ªØ li·ªáu (kh√¥ng b·∫Øt bu·ªôc SKU tr·ªëng n·∫øu kh√¥ng ƒë·ªïi)
        return productDAO.update(p); // G·ªçi DAO UPDATE
    }

    public boolean deleteProduct(long id) throws SQLException { // X√≥a s·∫£n ph·∫©m theo ID
        return productDAO.delete(id);
    }

    public Optional<Product> findProductById(long id) throws SQLException { // T√¨m s·∫£n ph·∫©m theo ID
        return productDAO.findById(id);
    }

    public List<Product> searchProducts(String keyword, int page, int pageSize) throws SQLException { // T√¨m ki·∫øm c√≥
                                                                                                      // ph√¢n trang
        return productDAO.search(keyword, page, pageSize);
    }

    // ===================== Kho h√†ng =====================

    public void importStock(long storeId, long productId, int quantity, String note) throws SQLException { // Nh·∫≠p kho
        if (storeId <= 0 || productId <= 0)
            throw new IllegalArgumentException("storeId/productId kh√¥ng h·ª£p l·ªá"); // Ki·ªÉm tra id h·ª£p l·ªá
        if (quantity <= 0)
            throw new IllegalArgumentException("S·ªë l∆∞·ª£ng ph·∫£i > 0"); // Ki·ªÉm tra s·ªë l∆∞·ª£ng d∆∞∆°ng
        productDAO.importStock(storeId, productId, quantity, note); // Ghi stock_moves v·ªõi move_type=IMPORT
    }

    public void exportStock(long storeId, long productId, int quantity, String note) throws SQLException { // Xu·∫•t kho
        if (storeId <= 0 || productId <= 0)
            throw new IllegalArgumentException("storeId/productId kh√¥ng h·ª£p l·ªá"); // Ki·ªÉm tra id h·ª£p l·ªá
        if (quantity <= 0)
            throw new IllegalArgumentException("S·ªë l∆∞·ª£ng ph·∫£i > 0"); // Ki·ªÉm tra s·ªë l∆∞·ª£ng d∆∞∆°ng
        productDAO.exportStock(storeId, productId, quantity, note); // Ghi stock_moves v·ªõi move_type=EXPORT; trigger DB
                                                                    // s·∫Ω tr·ª´ t·ªìn
    }

    public List<ProductDAO.InventoryOverview> getInventoryOverview(Long storeId, Long supplierId, String keyword,
            int page, int pageSize) throws SQLException {
        return productDAO.getInventoryOverview(storeId, supplierId, keyword, page, pageSize);
    }

    // ===================== VALIDATION =====================

    private void validateProduct(Product p, boolean creating) { // Ki·ªÉm tra d·ªØ li·ªáu s·∫£n ph·∫©m tr∆∞·ªõc khi ghi DB
        if (p == null)
            throw new IllegalArgumentException("Thi·∫øu d·ªØ li·ªáu s·∫£n ph·∫©m"); // Kh√¥ng c√≥ d·ªØ li·ªáu
        if (creating && (p.getSku() == null || p.getSku().trim().isEmpty())) // Khi t·∫°o m·ªõi b·∫Øt bu·ªôc c√≥ SKU
            throw new IllegalArgumentException("SKU kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        if (p.getName() == null || p.getName().trim().isEmpty()) // T√™n b·∫Øt bu·ªôc
            throw new IllegalArgumentException("T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        if (p.getUnitPrice() != null && p.getUnitPrice().compareTo(BigDecimal.ZERO) < 0) // Gi√° b√°n >= 0
            throw new IllegalArgumentException("Gi√° b√°n kh√¥ng h·ª£p l·ªá");
        if (p.getUnitCost() != null && p.getUnitCost().compareTo(BigDecimal.ZERO) < 0) // Gi√° v·ªën >= 0
            throw new IllegalArgumentException("Gi√° v·ªën kh√¥ng h·ª£p l·ªá");
    }
}